minio:
  runtimeClassName: kata-qemu-tdx
  podAnnotations:
    io.containerd.cri.runtime-handler: "{{ .Values.runtimeClassName }}"
    io.katacontainers.config.runtime.create_container_timeout: "1800"
  podLabels:
    istio.io/dataplane-mode: none
    sidecar.istio.io/inject: "true"
  image:
    pullPolicy: Always
  volumePermissions:
    image:
      pullPolicy: Always

postgresql:
  primary:
    extraPodSpec:
      runtimeClassName: kata-qemu-tdx
    podAnnotations:
      io.containerd.cri.runtime-handler: kata-qemu-tdx #"{{ .Values.runtimeClassName }}"
      io.katacontainers.config.runtime.create_container_timeout: "1800"
    podLabels:
      istio.io/dataplane-mode: none
      sidecar.istio.io/inject: "true"
  image:
    pullPolicy: Always
  volumePermissions:
    image:
      pullPolicy: Always
redis:
  master:
    extraPodSpec:
      runtimeClassName: kata-qemu-tdx
    podAnnotations:
      io.containerd.cri.runtime-handler: kata-qemu-tdx #"{{ .Values.runtimeClassName }}"
      io.katacontainers.config.runtime.create_container_timeout: "1800"
    podLabels:
      istio.io/dataplane-mode: none
      sidecar.istio.io/inject: "true"
  image:
    pullPolicy: Always
  volumePermissions:
    image:
      pullPolicy: Always

    #    ROOT_PASSWORD=$(kubectl get secret --namespace $ENHANCED_DATAPREP_NS edp-minio -o jsonpath="{.data.root-password}" | base64 -d)
    #"global.postgresql.auth.password=$postgresql_edp_password"
#    if [ ! -z "$ROOT_PASSWORD" ]; then
#    HELM_INSTALL_TDX_ARGS+=("auth.rootPassword=$ROOT_PASSWORD")
#    fi

tdx:
  common:
    kbsAddress: "your_kbs_address_here"
    runtimeClassName: kata-qemu-tdx
    annotations:
      io.containerd.cri.runtime-handler: "{{ .Values.tdx.common.runtimeClassName }}"
      io.katacontainers.config.hypervisor.kernel_params: "agent.guest_components_rest_api=all agent.aa_kbc_params=cc_kbc::{{ .Values.tdx.common.kbsAddress }}"
      io.katacontainers.config.runtime.create_container_timeout: "1800"
    labels:
      istio.io/dataplane-mode: none
      sidecar.istio.io/inject: "true"
  services:
    edp-backend:
      tdxEnabled: true
      resources:
        limits:
          cpu: 2
          memory: 2Gi
        requests:
          cpu: 2
          memory: 2Gi
    edp-celery:
      tdxEnabled: true
      resources:
        limits:
          cpu: 4
          memory: 8Gi
        requests:
          cpu: 2
          memory: 4Gi
    edp-dataprep:
      tdxEnabled: true
      resources:
        requests:
          cpu: 8
          memory: 16Gi
        limits:
          cpu: 8
          memory: 16Gi
    edp-flower:
      tdxEnabled: true
      resources:
        limits:
          cpu: 2
          memory: 2Gi
        requests:
          cpu: 1
          memory: 1Gi
    edp-ingestion:
      tdxEnabled: true
      resources:
        limits:
          cpu: 4
          memory: 4Gi
        requests:
          cpu: 1
          memory: 2Gi
    edp-embedding:
      tdxEnabled: true
      resources:
        limits:
          cpu: 4
          memory: 4Gi
        requests:
          cpu: 1
          memory: 2Gi
