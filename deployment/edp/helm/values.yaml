# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

proxy:
  httpProxy: ""
  httpsProxy: ""
  noProxy: ""

minioAccessKey: ""
minioSecretKey: ""
minioOidcClientSecret: ""

redisUrl: "edp-redis-master:6379"
redisUsername: "default"
redisPassword: ""

postgresDatabasePassword: "" # generated if not set via helm install

minio:
  persistence:
    enabled: true
    size: 10Gi
  metrics:
    enabled: true
  networkPolicy:
    extraIngress:
      - ports:
        - port: 15008
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostname: minio.erag.com
    path: /
    tls: true
    extraTls:
    - hosts:
        - minio.erag.com
      secretName: tls-secret
  apiIngress:
    enabled: true
    ingressClassName: "nginx"
    hostname: s3.erag.com
    path: /
    tls: true
    extraTls:
    - hosts:
        - s3.erag.com
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-origin: "*"
      nginx.ingress.kubernetes.io/cors-allow-headers: "Access-Control-Allow-Origin,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
  # bitnami helm chart does not have direct mappings to minio's oidc helm config, therefore env variables are used
  # reference: https://min.io/docs/minio/linux/reference/minio-server/settings/iam/openid.html
  extraEnvVars:
    - name: "MINIO_DOMAIN"
      value: "s3.erag.com"
    - name: "MINIO_BROWSER_REDIRECT_URL"
      value: "https://minio.erag.com/"
    - name: "MINIO_IDENTITY_OPENID_CONFIG_URL"
      value: "http://keycloak.auth.svc/realms/EnterpriseRAG/.well-known/openid-configuration"
    - name: "MINIO_IDENTITY_OPENID_CLIENT_ID"
      value: "EnterpriseRAG-oidc-minio"
    - name: "MINIO_IDENTITY_OPENID_CLIENT_SECRET"
      valueFrom:
        secretKeyRef:
          name: edp-minio-secrets
          key: EDP_OIDC_CLIENT_SECRET
    - name: "MINIO_IDENTITY_OPENID_CLAIM_NAME"
      value: "minio_roles"
    - name: "MINIO_IDENTITY_OPENID_REDIRECT_URI"
      value: "https://minio.erag.com/oauth_callback"
    - name: "MINIO_IDENTITY_OPENID_DISPLAY_NAME"
      value: "Enterprise RAG Login"
    - name: "MINIO_IDENTITY_OPENID_SCOPES"
      value: "openid,profile,email"
    - name: "MINIO_NOTIFY_WEBHOOK_ENABLE_EDP"
      value: "on"
    - name: "MINIO_NOTIFY_WEBHOOK_ENDPOINT_EDP"
      value: "http://edp-backend:5000/minio_event"
    - name: "MINIO_NOTIFY_WEBHOOK_MAX_RETRY_EDP"
      value: "3"
  extraEnvVarsSecret: "edp-minio-secrets"
  extraVolumes:
    - name: tls-secret-volume
      secret:
        secretName: tls-secret
  extraVolumeMounts:
    - name: tls-secret-volume
      mountPath: "/certs/CAs"
      readOnly: true
  provisioning:
    enabled: true
    buckets:
      - name: 'default'
        policy: 'none'
        purge: 'false'
    extraCommands:
        - mc admin accesskey rm provisioning $EDP_ACCESS_KEY || true
        - mc admin accesskey create provisioning --access-key "${EDP_ACCESS_KEY}" --secret-key "${EDP_SECRET_KEY}" --name "${EDP_NAME_KEY}" --description "Credentials for EDP Backend Service"
        - mc event rm --event "put,delete" provisioning/default arn:minio:sqs::EDP:webhook || true
        - mc event add --event "put,delete" provisioning/default arn:minio:sqs::EDP:webhook

redis:
  networkPolicy:
    extraIngress:
      - ports:
        - port: 15008
  replica:
    replicaCount: 0
  auth:
    enabled: true
    existingSecret: "edp-redis-secret"
  master:
    persistence:
      enabled: true
      size: 10Gi

postgresql:
  auth:
    username: "edp" # cannot refence secret
    database: "edp" # cannot refence secret
    existingSecret: "edp-postgresql-secret"
    secretKeys:
      userPasswordKey: "DATABASE_PASSWORD"
      adminPasswordKey: "DATABASE_ADMIN_PASSWORD"
  primary:
    networkPolicy:
      extraIngress:
        - ports:
          - port: 15008
    persistence:
      enabled: true
      size: 10Gi

celery:
  nameOverride: "edp-celery"
  repository: "localhost:5000/opea/enhanced-dataprep"
  tag: latest
  pullPolicy: Always
  command: "celery -A app.tasks.celery worker --loglevel=debug --concurrency=2"
  environment:
    - name: MINIO_BASE_URL
      value: "edp-minio:9000"
    - name: MINIO_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: edp-minio-secrets
          key: EDP_ACCESS_KEY
    - name: MINIO_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: edp-minio-secrets
          key: EDP_SECRET_KEY
    - name: CELERY_BROKER_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BROKER_URL
    - name: CELERY_BACKEND_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BACKEND_URL
    - name: DATAPREP_ENDPOINT
      value: "http://dataprep-svc.dataprep.svc:9399/v1/dataprep"
    - name: EMBEDDING_ENDPOINT
      value: "http://embedding-svc.dataprep.svc:6000/v1/embeddings"
    - name: INGESTION_ENDPOINT
      value: "http://ingestion-svc.dataprep.svc:6120/v1/ingestion"
    - name: DATABASE_HOST
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_HOST
    - name: DATABASE_PORT
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PORT
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_NAME
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_USER
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PASSWORD

flower:
  nameOverride: "edp-flower"
  repository: "localhost:5000/opea/enhanced-dataprep"
  tag: latest
  pullPolicy: Always
  command: "celery -A tasks.celery flower"
  environment:
    - name: FLOWER_ADDRESS
      value: "0.0.0.0"
    - name: FLOWER_PORT
      value: "5555"
    - name: CELERY_BROKER_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BROKER_URL
    - name: CELERY_BACKEND_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BACKEND_URL
    - name: DATABASE_HOST
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_HOST
    - name: DATABASE_PORT
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PORT
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_NAME
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_USER
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PASSWORD

backend:
  environment:
    - name: CELERY_BROKER_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BROKER_URL
    - name: CELERY_BACKEND_URL
      valueFrom:
        secretKeyRef:
          name: edp-celery-secrets
          key: CELERY_BACKEND_URL
    - name: DATABASE_HOST
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_HOST
    - name: DATABASE_PORT
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PORT
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_NAME
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_USER
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: edp-postgresql-secret
          key: DATABASE_PASSWORD
    - name: MINIO_BASE_URL
      value: "edp-minio:9000"
    - name: MINIO_EXTERNAL_URL
      value: "s3.erag.com"
    - name: MINIO_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: edp-minio-secrets
          key: EDP_ACCESS_KEY
    - name: MINIO_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: edp-minio-secrets
          key: EDP_SECRET_KEY
  nameOverride: "edp-backend"
  repository: "localhost:5000/opea/enhanced-dataprep"
  tag: latest
  pullPolicy: Always
  command: "python main.py"

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: "edp"
fullnameOverride: "edp-chart"

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000

securityContextWithTemp:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000

resources: {}

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}
