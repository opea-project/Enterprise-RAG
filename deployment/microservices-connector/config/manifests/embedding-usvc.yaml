---
# Source: embedding-usvc/templates/configmap.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: embedding-usvc-config
  labels:
    helm.sh/chart: embedding-usvc-0.8.0
    app.kubernetes.io/name: embedding-usvc
    app.kubernetes.io/instance: embedding-usvc
    app.kubernetes.io/version: "v0.8"
    app.kubernetes.io/managed-by: Helm
data:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""
  EMBEDDING_CONNECTOR: "langchain"
  EMBEDDING_MODEL_NAME: "BAAI/bge-base-en-v1.5"
  EMBEDDING_MODEL_SERVER: "torchserve"
---
# Source: embedding-usvc/templates/service.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: embedding-usvc
  labels:
    helm.sh/chart: embedding-usvc-0.8.0
    app.kubernetes.io/name: embedding-usvc
    app.kubernetes.io/instance: embedding-usvc
    app.kubernetes.io/version: "v0.8"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6000
      targetPort: 6000
      protocol: TCP
      name: embedding-usvc
  selector:
    app.kubernetes.io/name: embedding-usvc
    app.kubernetes.io/instance: embedding-usvc
---
# Source: embedding-usvc/templates/deployment.yaml
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: embedding-usvc
  labels:
    helm.sh/chart: embedding-usvc-0.8.0
    app.kubernetes.io/name: embedding-usvc
    app.kubernetes.io/instance: embedding-usvc
    app.kubernetes.io/version: "v0.8"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: embedding-usvc
      app.kubernetes.io/instance: embedding-usvc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: embedding-usvc
        app.kubernetes.io/instance: embedding-usvc
    spec:
      securityContext:
        {}
      initContainers:
        - name: wait-for-embedding
          image: alpine/curl
          command:
            - sh
            - -c
            - |
                if [ -z "$EMBEDDING_MODEL_SERVER_ENDPOINT" ]; then
                  echo "Environment variable EMBEDDING_MODEL_SERVER_ENDPOINT is not set. Skipping the init container.";
                else
                  until curl -s $EMBEDDING_MODEL_SERVER_ENDPOINT; do
                    echo "waiting for embedding model server $EMBEDDING_MODEL_SERVER_ENDPOINT to be ready...";
                    sleep 2;
                  done;
                fi;
      containers:
        - name: embedding-usvc
          envFrom:
            - configMapRef:
                name: embedding-usvc-config
            - configMapRef:
                name: extra-env-config
                optional: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "localhost:5000/opea/embedding-tei:latest"
          imagePullPolicy: Always
          ports:
            - name: embedding-usvc
              containerPort: 6000
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: v1/health_check
              port: embedding-usvc
            initialDelaySeconds: 5
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: v1/health_check
              port: embedding-usvc
            initialDelaySeconds: 5
            periodSeconds: 60
          startupProbe:
            failureThreshold: 120
            httpGet:
              path: v1/health_check
              port: embedding-usvc
            initialDelaySeconds: 5
            periodSeconds: 60
          resources:
            {}
      volumes:
        - name: tmp
          emptyDir: {}
