# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# Default values for gmc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

proxy:
  httpProxy: ""
  httpsProxy: ""
  noProxy: ""

tokens:
  hugToken: ""


# Common tag & repository for all images. Override if needed for specific images.
common_tag: &tag "latest"
common_registry: &repo "localhost:5000"
common_registry_path: &path "erag"

llm_model: &cpu_model "Intel/neural-chat-7b-v3-3"
llm_model_gaudi: &hpu_model "mistralai/Mixtral-8x7B-Instruct-v0.1"

# imagePullSecrets:
#   - name: regcred
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels:
  control-plane: gmc-controller

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

resources:
  limits:
    memory: 128Mi
  requests:
    cpu: 500m
    memory: 64Mi

livenessProbe:
  httpGet:
    path: /healthz
    port: gmc
  initialDelaySeconds: 30
  periodSeconds: 20
readinessProbe:
  httpGet:
    path: /readyz
    port: gmc
  initialDelaySeconds: 5
  periodSeconds: 10

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

service:
  type: ClusterIP

pvc:
  - name: model-volume-embedding
    accessMode: ReadWriteOnce
    namespace: chatqa
    storage: 20Gi
  - name: model-volume-llm
    accessMode: ReadWriteOnce
    namespace: chatqa
    storage: 100Gi
  - name: vector-store-data
    accessMode: ReadWriteOnce
    namespace: chatqa
    storage: 20Gi

images:
  gmcManager:
    image: "gmcmanager"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  gmcRouter:
    image: "gmcrouter"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  dataprep-usvc:
    image: "dataprep"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  embedding-usvc:
    image: "embedding"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  reranking-usvc:
    image: "reranking"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  teirerank:
    image: "teirerank"
    repository: *repo
    tag: *tag
    envfile: "src/comps/reranks/impl/model_server/tei/docker/.env.cpu"
  teirerank_gaudi:
    image: "teirerank_gaudi"
    repository: *repo
    tag: *tag
    envfile: "src/comps/reranks/impl/model_server/tei/docker/.env.hpu"
  prompt-template-usvc:
    image: "prompt_template"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  torchserve:
    image: "torchserve"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/embeddings/impl/model-server/torchserve/docker/.env"
  retriever-usvc:
    image: "retriever"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/retrievers/impl/microservice/.env"
  ingestion-usvc:
    image: "ingestion"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/ingestion/impl/microservice/.env"
  llm-usvc:
    image: "llm"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/llms/impl/microservice/.env"
  in-guard-usvc:
    image: "in-guard"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  out-guard-usvc:
    image: "out-guard"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  ui-usvc:
    image: "chatqna-conversation-ui"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
  tgi:
    envfile: "src/comps/llms/impl/model_server/tgi/docker/.env.cpu"
    envs:
      LLM_TGI_MODEL_NAME: *cpu_model
  tgi_gaudi:
    envfile: "src/comps/llms/impl/model_server/tgi/docker/.env.hpu"
    envs:
      LLM_TGI_MODEL_NAME: *hpu_model
  vllm_gaudi:
    image: "vllm-gaudi"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/llms/impl/model_server/vllm/docker/.env.hpu"
    envs:
      LLM_VLLM_MODEL_NAME: *hpu_model
  vllm:
    image: "vllm-cpu"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/llms/impl/model_server/vllm/docker/.env.cpu"
    envs:
      LLM_VLLM_MODEL_NAME: *cpu_model
  vllm_openvino:
    image: "vllm-openvino"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/llms/impl/model_server/vllm/docker/.env.cpu"
    envs:
      LLM_VLLM_MODEL_NAME: *cpu_model
  langdtct-usvc:
    image: "language_detection"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
    envfile: "src/comps/language_detection/impl/microservice/.env"
  fingerprint-usvc:
    image: "system-fingerprint"
    repository: *repo
    tag: *tag
    path: *path
    pullPolicy: Always
