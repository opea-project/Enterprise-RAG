# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
- name: Main block for role execution
  block:
    - name: Increment verification attempt counter
      set_fact:
        execution_counter: "{{ (execution_counter | default(0) | int) + 1 }}"
      tags:
        - install
        - restore
        - uninstall

    - name: Define operation_mode
      set_fact:
        operation_mode: >-
          {{
            'install' if 'install' in ansible_run_tags
            or 'restore' in ansible_run_tags else
            'uninstall' if 'uninstall' in ansible_run_tags
          }}
      tags:
        - install
        - restore
        - uninstall

    - name: Wait 60 seconds before verifying namespaces and pods
      pause:
        seconds: 60
      tags:
        - install
        - restore
        - uninstall
      when: (execution_counter | int) > 1

    - name: Include tasks to get enabled namespaces
      ansible.builtin.include_role:
        name: utils
        tasks_from: get_namespaces.yaml
      tags:
        - install
        - restore
        - uninstall

    - name: Get all namespaces
      kubernetes.core.k8s_info:
        kind: Namespace
      register: namespaces_info
      tags:
        - install
        - restore
        - uninstall

    - name: Compare enabled namespaces with existing namespaces
      set_fact:
        missing_namespaces: >-
          {{
            enabled_namespaces | unique |
            difference(namespaces_info.resources | map(attribute='metadata.name') | list)
          }}
      tags:
        - install
        - restore
        - uninstall

    - name: Get pods in enabled namespaces
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ item }}"
      with_items: "{{ enabled_namespaces | unique }}"
      when: item in (namespaces_info.resources | map(attribute='metadata.name') | list)
      register: pods_info
      tags:
        - install
        - restore
        - uninstall

    - name: Identify empty namespaces
      set_fact:
        empty_namespaces: >-
          {{
            pods_info.results | selectattr('resources', 'defined') |
            selectattr('resources', 'equalto', []) |
            map(attribute='item') | list
          }}
      tags:
        - install
        - restore
        - uninstall

    - name: Identify containers with "not ready" status
      set_fact:
        not_ready_containers: >-
          {%- set result = [] -%}
          {%- for pod in pods_info.results |
                selectattr('resources', 'defined') |
                rejectattr('resources', 'equalto', []) |
                map(attribute='resources') | flatten |
                selectattr('status.phase', 'equalto', 'Running') -%}
            {%- for container in pod.status.containerStatuses | default([]) -%}
              {%- if not container.ready -%}
                {%- set _ = result.append({'pod': pod.metadata.name, 'container': container.name}) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ result }}
      tags:
        - install
        - restore

    - name: Verify pods based on operation_mode
      set_fact:
        undesirable_pods: >-
          {{
            (pods_info.results | selectattr('resources', 'defined') |
            rejectattr('resources', 'equalto', []) |
            map(attribute='resources') | flatten |
            rejectattr('status.phase', 'in', ['Running', 'Succeeded']) |
            map(attribute='metadata.name') |
            list)
            if operation_mode == 'install' else
            (pods_info.results | selectattr('resources', 'defined') |
            rejectattr('resources', 'equalto', []) |
            map(attribute='resources') | flatten |
            map(attribute='metadata.name') |
            list)
          }}
      tags:
        - install
        - restore
        - uninstall

    - name: Failure summary message
      fail:
        msg: >-
          {{
            (
              ("The following pods contain not ready containers:" ~ not_ready_containers
              if operation_mode == 'install' and not_ready_containers | length > 0 else "") +
              ("The following pods are not in running or succeeded state:" ~ undesirable_pods
              if operation_mode == 'install' and undesirable_pods | length > 0 else
              "The following pods are still present in the cluster:" ~ undesirable_pods
              if operation_mode == 'uninstall' and undesirable_pods | length > 0 else "") +
              ("The following namespaces have zero pods and are not terminated:" ~ empty_namespaces
              if empty_namespaces | length > 0 else "") +
              ("The following namespaces are missing:" ~ missing_namespaces
              if operation_mode == 'install' and missing_namespaces | length > 0 else "")
            ) | trim
          }}
      when: (operation_mode == 'install' and not_ready_containers | length > 0) or
            (operation_mode == 'install' and undesirable_pods | length > 0) or
            (operation_mode == 'uninstall' and undesirable_pods | length > 0) or
            (operation_mode == 'install' and missing_namespaces | length > 0) or
            (empty_namespaces | length > 0)
      tags:
        - install
        - restore
        - uninstall

    - name: Success summary message
      debug:
        msg: >-
          {{
            "All pods are in running or succeeded state."
            if operation_mode == 'install' else
            "All pods from enabled namespaces have been removed from the cluster."
          }}
      when: (operation_mode == 'install' and undesirable_pods | length == 0) or
            (operation_mode == 'uninstall' and undesirable_pods | length == 0)
      tags:
        - install
        - restore
        - uninstall

  rescue:
    - name: Retry the role on failure
      include_role:
        name: check_pods
      when: (execution_counter | int) < (check_pods_role_retries | default(5))
      tags:
        - install
        - restore
        - uninstall

    - name: Return failed status after maximum retries
      fail:
        msg: "Role execution failed after (check_pods_role_retries | default(5)) attempts."
      when: (execution_counter | int) >= (check_pods_role_retries | default(5))
      tags:
        - install
        - restore
        - uninstall
