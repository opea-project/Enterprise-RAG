---
# Set default hardware requirement variables based on platform flag
- name: Set hardware requirement variables
  ansible.builtin.set_fact:
    # Common variables
    hardware_check_passed: true
    hardware_issues: []
    # Default to Xeon-only if not specified
    is_gaudi_platform: "{{ is_gaudi_platform | default(false) | bool }}"
  tags:
    - hardware

# Set platform-specific hardware requirements based on is_gaudi_platform flag
- name: Set platform-specific hardware requirements for Gaudi
  ansible.builtin.set_fact:
    min_total_cpu_cores: "{{ gaudi_min_total_cpu_cores }}"
    min_total_memory_gb: "{{ gaudi_min_total_memory_gb }}"
    min_total_storage_gb: "{{ gaudi_min_total_storage_gb }}"
    min_gaudi_cards: "{{ gaudi_min_gaudi_cards }}"
  when: is_gaudi_platform | bool
  tags:
    - hardware

# Set platform-specific hardware requirements for Xeon-only
- name: Set platform-specific hardware requirements for Xeon-only
  ansible.builtin.set_fact:
    min_total_cpu_cores: "{{ cpu_min_total_cpu_cores }}"
    min_total_memory_gb: "{{ cpu_min_total_memory_gb }}"
    min_total_storage_gb: "{{ cpu_min_total_storage_gb }}"
  when: not is_gaudi_platform | bool
  tags:
    - hardware

# Display platform detection result
- name: Display platform detection
  ansible.builtin.debug:
    msg: >-
      Target platform: {{ 'Gaudi' if is_gaudi_platform else 'Xeon-only' }} -
      Using requirements: {{ min_total_cpu_cores }} cores,
      {{ min_total_memory_gb }} GB RAM,
      {{ min_total_storage_gb }} GB storage
      {% if is_gaudi_platform %}, {{ min_gaudi_cards }} Gaudi cards{% endif %}
  tags:
    - hardware

- name: Check gaudi specific requirements
  when: is_gaudi_platform | bool
  block:
    - name: Check for number of Gaudi cards
      ansible.builtin.shell:
        cmd: "lspci | grep -i habana | grep -i -c -E '(gaudi2|gaudi3)' || echo '0'"
      register: gaudi_card_count
      failed_when: false
      delegate_to: "{{ item }}"
      with_items: "{{ groups['k8s_cluster'] }}"
      tags:
        - hardware

    - name: Calculate total Gaudi cards
      ansible.builtin.set_fact:
        total_gaudi_cards: "{{ gaudi_card_count.results | map(attribute='stdout') | map('int') | sum }}"
      tags:
        - hardware

    - name: Check if sufficient Gaudi cards are available
      ansible.builtin.set_fact:
        hardware_issues: >-
          {{ hardware_issues + [
            'Insufficient Gaudi cards: ' +
            (total_gaudi_cards | string) +
            ' available, ' +
            (min_gaudi_cards | string) +
            ' required'
          ] }}
        hardware_check_passed: false
      when: (total_gaudi_cards | int) < (min_gaudi_cards | int)
      tags:
        - hardware

# Gather hardware facts from all nodes
- name: Gather hardware facts
  ansible.builtin.setup:
    gather_subset:
      - hardware
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_cluster'] }}"
  register: node_facts
  tags:
    - hardware

# Calculate total CPU cores and memory across all nodes
- name: Calculate total CPU cores and memory
  ansible.builtin.set_fact:
    total_cpu_cores: "{{ node_facts.results | sum(attribute='ansible_facts.ansible_processor_vcpus') }}"
    total_memory_gb: "{{ (node_facts.results | sum(attribute='ansible_facts.ansible_memtotal_mb') / 1024) | round(2) }}"
  tags:
    - hardware

# Explicitly cast values to ensure proper comparison
- name: Ensure proper type casting for comparisons
  ansible.builtin.set_fact:
    # Force string conversion first, then convert to int/float
    total_cpu_cores_int: "{{ (total_cpu_cores | string) | int }}"
    min_total_cpu_cores_int: "{{ (min_total_cpu_cores | string) | int }}"
    total_memory_gb_float: "{{ (total_memory_gb | string) | float }}"
    min_total_memory_gb_float: "{{ (min_total_memory_gb | string) | float }}"
  tags:
    - hardware

# Use a direct integer comparison in a register
- name: Set CPU comparison result
  ansible.builtin.set_fact:
    cpu_check_failed: "{{ (total_cpu_cores_int | int) < (min_total_cpu_cores_int | int) }}"
  tags:
    - hardware

# Use the registered value for the actual check
- name: Check if nodes have sufficient CPU cores
  ansible.builtin.set_fact:
    hardware_issues: >-
      {{ hardware_issues + [
        'Insufficient CPU cores: ' +
        (total_cpu_cores | string) +
        ' available, ' +
        (min_total_cpu_cores | string) +
        ' required'
      ] }}
    hardware_check_passed: false
  when: cpu_check_failed | bool
  tags:
    - hardware

# Do the same for memory
- name: Set memory comparison result
  ansible.builtin.set_fact:
    memory_check_failed: "{{ (total_memory_gb_float | float) < (min_total_memory_gb_float | float) }}"
  tags:
    - hardware

- name: Check if nodes have sufficient memory
  ansible.builtin.set_fact:
    hardware_issues: >-
      {{ hardware_issues + [
        'Insufficient memory: ' + total_memory_gb | string + ' GB available, ' +
        min_total_memory_gb | string + ' GB required'
      ] }}
    hardware_check_passed: false
  when: memory_check_failed | bool
  tags:
    - hardware

# Check disk space on each node
- name: Check available disk space
  ansible.builtin.shell:
    cmd: "df -BG / | awk 'NR==2 {print $4}'"
  register: df_result
  changed_when: false
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_cluster'] }}"
  tags:
    - hardware

# Calculate total storage space
- name: Calculate total storage space
  ansible.builtin.set_fact:
    storage_values: "{{ df_result.results | map(attribute='stdout') | map('regex_replace', 'G$', '') | map('int') | list }}"
    total_storage_gb: "{{ df_result.results | map(attribute='stdout') | map('regex_replace', 'G$', '') | map('int') | sum }}"
  tags:
    - hardware

# Set storage comparison result
- name: Set storage comparison result
  ansible.builtin.set_fact:
    storage_check_failed: "{{ ((total_storage_gb | string) | int) < ((min_total_storage_gb | string) | int) }}"
  tags:
    - hardware

- name: Check if nodes have sufficient storage space
  ansible.builtin.set_fact:
    hardware_issues: >-
      {{ hardware_issues + [
        'Insufficient storage space: ' +
        (total_storage_gb | string) + ' GB available, ' +
        (min_total_storage_gb | string) + ' GB required'
      ] }}
    hardware_check_passed: false
  when: storage_check_failed | bool
  tags:
    - hardware

# Get per-node details for reporting
- name: Gather per-node details
  ansible.builtin.set_fact:
    node_details: >-
      {{ node_details | default([]) + [
        {
          'name': item.ansible_facts.ansible_hostname,
          'cores': item.ansible_facts.ansible_processor_vcpus,
          'memory_gb': (item.ansible_facts.ansible_memtotal_mb / 1024) | round(2)
        }
      ] }}
  loop: "{{ node_facts.results }}"
  loop_control:
    label: "{{ item.ansible_facts.ansible_hostname }}"
  tags:
    - hardware

# Display hardware check results
- name: Display hardware check results
  ansible.builtin.debug:
    msg: |
      Hardware Check Results:
      =====================================================
      Platform: {{ 'Gaudi' if is_gaudi_platform else 'Xeon-only' }}

      {% if hardware_check_passed %}
      HARDWARE CHECK PASSED: All requirements met
      {% else %}
      HARDWARE CHECK FAILED: Issues were found in your hardware configuration
      {% endif %}

      Total Resources:
      - Total CPU Cores: {{ total_cpu_cores }} (Required: {{ min_total_cpu_cores }})
      - Total Memory: {{ total_memory_gb }} GB (Required: {{ min_total_memory_gb }} GB)
      - Total Storage: {{ total_storage_gb }} GB (Required: {{ min_total_storage_gb }} GB)
      {% if is_gaudi_platform %}
      - Total Gaudi Cards: {{ total_gaudi_cards | default('0') }} (Required: {{ min_gaudi_cards }})
      {% endif %}

      Per-Node Details:
      {% for node in node_details %}
      - {{ node.name }}: {{ node.cores }} cores, {{ node.memory_gb }} GB RAM
      {% endfor %}

      {% if hardware_issues|length > 0 %}
      Issues Found:
      {% for issue in hardware_issues %}
      * {{ issue }}
      {% endfor %}
      {% endif %}
  tags:
    - hardware

# Fail if hardware check failed
- name: Fail if hardware check failed
  ansible.builtin.fail:
    msg: "Hardware check failed. Please fix the issues described above."
  when: not hardware_check_passed and (infrastructure_check_hardware_fail_on_check | default(true))
  tags:
    - hardware
