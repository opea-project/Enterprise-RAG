# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
- name: Set roles facts
  ansible.builtin.set_fact:
    edp_helm_override_values_path: "{{ tmp_dir }}/{{ edp.helm.chart_name }}-override-values.yaml"
  tags:
    - install

- name: Ensure Helm repositories
  kubernetes.core.helm_repository:
    name: "{{ edp.helm.repo_name }}"
    repo_url: "{{ edp.helm.repo_url }}"
    state: present
  tags:
    - install

- name: Build Helm chart dependencies
  ansible.builtin.command:
    cmd: helm dependency build
    chdir: "{{ edp.helm.chart_directory }}"
  tags:
    - install

- name: Ensure namespace exists
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ edp.namespace }}"
  tags:
    - install

- name: Create TLS secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ edp.tls.secret_name }}"
        namespace: "{{ edp.namespace }}"
      data:
        tls.crt: "{{ lookup('file', pathToCert) | b64encode }}"
        tls.key: "{{ lookup('file', pathToKey) | b64encode }}"
      type: kubernetes.io/tls
  tags:
    - install

# Creates chatqa_namespace
- name: Get chatqa namespace
  ansible.builtin.include_role:
    name: utils
    tasks_from: get_chatqa_namespace.yaml
  tags:
    - install

- name: Get the secret from the source namespace
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: vector-database-config
    namespace: "{{ chatqa_namespace }}"
  register: secret_info
  no_log: "{{ secure_logs }}"
  tags:
    - install

- name: Create the secret in the target namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Secret
    name: vector-database-config
    namespace: "{{ edp.namespace }}"
    state: present
    definition:
      metadata:
        name: "{{ secret_info.resources[0].metadata.name }}"
        namespace: "{{ edp.namespace }}"
      data: "{{ secret_info.resources[0].data }}"
      type: "{{ secret_info.resources[0].type }}"
  no_log: "{{ secure_logs }}"
  tags:
    - install

# Creates client_secret_id
- name: Get client_secret_id keycloak
  vars:
    client_id: "{{ edp.client_id }}"
  include_role:
    name: keycloak
    tasks_from: get_secret_id
  tags:
    - install

- name: Set secret client_secret_id
  ansible.builtin.set_fact:
    edp_client_secret_id: "{{ client_secret_id.stdout }}"
  no_log: "{{ secure_logs }}"
  tags:
    - install

- name: Generate random string for access key
  ansible.builtin.set_fact:
    edp_minio_access_key: "{{ lookup('password', '/dev/null length=10 chars=ascii_letters,digits,special') }}"
  when: edp.storageType == "minio"
  no_log: "{{ secure_logs }}"
  tags:
    - install

- name: Generate random string for secret key
  ansible.builtin.set_fact:
    edp_minio_secret_key: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits,special') }}"
  when: edp.storageType == "minio"
  no_log: "{{ secure_logs }}"
  tags:
    - install

- name: Generate password
  ansible.builtin.include_role:
    name: generate_password
    tasks_from: generate_password.yaml
  loop:
    - { name: EDP_REDIS, user: "{{ edp.redis.auth.user.db_username }}" }
    - { name: EDP_POSTGRESQL, user: "{{ edp.postgresql.auth.user.db_username }}" }
    - { name: EDP_POSTGRESQL_ADMIN, user: "{{ edp.postgresql.auth.admin.db_username }}" }
  no_log: "{{ secure_logs }}"
  tags:
    - install

- name: Generate override values file from template
  ansible.builtin.template:
    src: "values.yaml.j2"
    dest: "{{ edp_helm_override_values_path }}"
    mode: '0644'
  tags:
    - install

- name: Set values_files list
  ansible.builtin.set_fact:
    values_files: >
      {{
        [edp.helm.default_values_file] +
        [edp_helm_override_values_path]
      }}
  tags:
    - install

- name: Install or Upgrade Helm chart
  kubernetes.core.helm:
    name: "{{ edp.helm.release_name }}"
    chart_ref: "{{ edp.helm.chart_directory }}"
    namespace: "{{ edp.namespace }}"
    values_files: "{{ values_files }}"
    state: present
    dependency_update: true
    create_namespace: true
    timeout: "{{ helm_timeout }}"
    wait: true
  tags:
    - install

- name: Uninstall Helm chart
  kubernetes.core.helm:
    name: "{{ edp.helm.release_name }}"
    namespace: "{{ edp.namespace }}"
    state: absent
  tags:
    - uninstall

- name: Delete namespace
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ edp.namespace }}"
  tags:
    - uninstall
