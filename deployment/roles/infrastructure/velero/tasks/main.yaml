# Copyright (C) 2024-2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
- name: Create tmp directory if it does not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '755'
  loop:
    - "{{ log_dir }}"
    - "{{ tmp_dir }}"
  tags:
    - install
    - post-install

- name: Validate options
  fail:
    msg: "Configuration is not valid: enabling velero requires install_server or install_client to be true."
  when: not velero.install_server and not velero.install_client
  tags:
    - install
    - post-install

- name: Set roles facts
  ansible.builtin.set_fact:
    velero_helm_override_values_path: "{{ tmp_dir }}/{{ velero.helm.chart_name }}-override-values.yaml"
  tags:
    - install
    - post-install

- name: Ensure Helm repositories
  kubernetes.core.helm_repository:
    name: "{{ velero.helm.repo_name }}"
    repo_url: "{{ velero.helm.repo_url }}"
    state: present
  when: velero.install_server
  tags:
    - install
    - post-install

- name: Build Helm chart dependencies
  ansible.builtin.command:
    cmd: helm dependency build
    chdir: "{{ velero.helm.chart_directory }}"
  when: velero.install_server
  tags:
    - install
    - post-install

- name: Ensure namespace exists
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ velero.namespace }}"
  tags:
    - install
    - post-install

- name: Handle certificates for cluster-level services including velero
  ansible.builtin.include_role:
    name: common/certs
    apply:
      tags:
        - install
        - post-install
  vars:
    tls_file_prefix: "clustertls"
    certs_autogenerate: "{{ clusterCerts.autoGenerated }}"
    certs_preset_pathToCert: "{{ clusterCerts.pathToCert | default('') }}"
    certs_preset_pathToKey: "{{ clusterCerts.pathToKey | default('') }}"
    extra_san: >-
      {{
        [] +
        ([velero.minio.domainName, velero.minio.apiDomainName] if (velero.enabled and velero.storageType == "minio") | default(false) else [])
      }}
  tags:
    - install
    - post-install

- name: Create TLS secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ velero.tls.secret_name }}"
        namespace: "{{ velero.namespace }}"
      data:
        tls.crt: "{{ lookup('file', pathToCert) | b64encode }}"
        tls.key: "{{ lookup('file', pathToKey) | b64encode }}"
      type: kubernetes.io/tls
  tags:
    - install
    - post-install

- name: Load init passwords
  ansible.builtin.include_role:
    name: generate_password
    apply:
      tags:
        - install
        - post-install
  tags:
    - install
    - post-install

- name: Generate random string for keys
  ansible.builtin.include_role:
    name: generate_password
    tasks_from: generate_key
    apply:
      tags:
        - install
        - post-install
  loop:
    - { name: VELERO_MINIO_ACCESS_KEY }
    - { name: VELERO_MINIO_SECRET_KEY }
  no_log: "{{ secure_logs }}"
  tags:
    - install
    - post-install

- name: Generate password
  ansible.builtin.include_role:
    name: generate_password
    tasks_from: generate_password
    apply:
      tags:
        - install
        - post-install
  loop:
    - { name: MINIO_ADMIN, user: "{{ velero.minio.auth.admin_username }}" }
  no_log: "{{ secure_logs }}"
  tags:
    - install
    - post-install

- name: Get all StorageClasses
  kubernetes.core.k8s_info:
    api_version: storage.k8s.io/v1
    kind: StorageClass
  register: sc_list
  tags:
    - install
    - post-install

- name: Discover default StorageClass
  set_fact:
    default_storage_class: >-
      {%- for item in sc_list.resources -%}
        {%- if item.metadata.annotations is defined and item.metadata.annotations.get('storageclass.kubernetes.io/is-default-class', false) -%}
          {{ item }}
        {%- endif -%}
      {%- endfor -%}
  tags:
    - install
    - post-install

- name: Fail if no default StorageClass found
  ansible.builtin.fail:
    msg: "No default StorageClass found. Please set a default StorageClass in your cluster and retry installation of velero with post-install tag."
  when: default_storage_class == ""
  tags:
    - install
    - post-install

- name: Discover default storage class driver
  ansible.builtin.set_fact:
    default_storage_driver: "{{ default_storage_class.provisioner }}"
  tags:
    - install
    - post-install

- name: Configure snapshot class
  ansible.builtin.set_fact:
    velero_snapshot_class_driver: >-
      {{ velero.snapshot_class_driver if velero.snapshot_class_driver != "" else default_storage_driver }}
  tags:
    - install
    - post-install

- name: Generate override values file from template
  ansible.builtin.template:
    src: "values.yaml.j2"
    dest: "{{ velero_helm_override_values_path }}"
    mode: '0644'
  tags:
    - install
    - post-install

- name: Set values_files list
  ansible.builtin.set_fact:
    values_files: >
      {{
        [velero.helm.default_values_file] +
        [velero_helm_override_values_path]
      }}
  tags:
    - install
    - post-install

- name: Install or Upgrade Helm chart
  kubernetes.core.helm:
    name: "{{ velero.helm.release_name }}"
    chart_ref: "{{ velero.helm.chart_directory }}"
    namespace: "{{ velero.namespace }}"
    values_files: "{{ values_files }}"
    state: present
    dependency_update: true
    create_namespace: true
    timeout: "{{ helm_timeout }}"
    wait: true
  tags:
    - install
    - post-install

- name: Wait for velero pods to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ velero.namespace }}"
    label_selectors:
      - app.kubernetes.io/name=velero
  register: velero_pods_info
  until: velero_pods_info.resources | length > 0 and velero_pods_info.resources[0].status.phase == "Running"
  retries: 30
  delay: 10
  tags:
    - install
    - post-install

- name: Get velero server running pod name
  ansible.builtin.set_fact:
    velero_pod_name: "{{ velero_pods_info.resources[0].metadata.name }}"
  tags:
    - install
    - post-install

- name: Discover velero version
  kubernetes.core.k8s_exec:
    pod: "{{ velero_pod_name }}"
    container: velero
    namespace: "{{ velero.namespace }}"
    command: /velero version
  register: velero_version_check
  tags:
    - install
    - post-install

- name: Extract velero server version
  ansible.builtin.set_fact:
    velero_server_version: "{{ (velero_version_check.stdout | replace('\t', '  ') | from_yaml).Server.Version }}"
  tags:
    - install
    - post-install

- name: Verify velero server reports correct version
  fail:
    msg: "Can't identify velero server version to confirm it's working"
  when:
    velero_server_version is not regex('^[vV][0-9]+\.[0-9]+\.[0-9]+$')
  tags:
    - install
    - post-install

- name: Select velero client version to install
  ansible.builtin.set_fact:
    velero_client_target_version: >-
      {{ velero.client_version if (velero.client_version != "automatic") else velero_server_version }}
  when:
    velero.install_client
  tags:
    - install
    - post-install

- name: Discover local velero client version
  ansible.builtin.command: velero version
  register: velero_local_client_check
  ignore_errors: true
  when:
    velero.install_client
  tags:
    - install
    - post-install

- name: Extract local velero client version
  ansible.builtin.set_fact:
    velero_local_client_version: "{{ (velero_local_client_check.stdout | replace('\t', '  ') | from_yaml).Client.Version }}"
  when:
    velero.install_client and velero_local_client_check.rc == 0
  tags:
    - install
    - post-install

- name: Decide if velero client needs to be installed
  ansible.builtin.set_fact:
    velero_do_install_client: >-
      {{ velero_local_client_check.rc != 0 or velero_local_client_version  != velero_client_target_version }}
  when:
    velero.install_client
  tags:
    - install
    - post-install

- name: Download velero client archive
  ansible.builtin.get_url:
    url: https://github.com/vmware-tanzu/velero/releases/download/{{velero_client_target_version}}/velero-{{velero_client_target_version}}-linux-amd64.tar.gz
    dest: /tmp/velero-{{ velero_client_target_version }}-linux-amd64.tar.gz
    mode: '0644'
  when:
    velero.install_client and velero_do_install_client
  tags:
    - install
    - post-install

- name: Extract velero binary
  become: true
  ansible.builtin.unarchive:
    src: /tmp/velero-{{ velero_client_target_version }}-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: true
    extra_opts:
      - "--strip-components=1"
  when:
    velero.install_client and velero_do_install_client
  tags:
    - install
    - post-install

- name: Set ownership and permissions for velero binary
  become: true
  ansible.builtin.file:
    path: /usr/local/bin/velero
    owner: "{{ ansible_user }}"
    mode: '0755'
  when:
    velero.install_client and velero_do_install_client
  tags:
    - install
    - post-install

- name: Discover velero client version
  ansible.builtin.command: velero version
  register: velero_client_version_check
  ignore_errors: true
  tags:
    - install
    - post-install

- name: Sanity check - fail if velero client is unavailable and not requested to install
  fail:
    msg: >
      Velero client is unavailable and not enabled for install.
      Backup and restore procedures can't be enabled.
      Install velero client separately or enable it in config.yaml (install_client: true).
  when:
    - velero_client_version_check.rc != 0 and not velero.install_client
  tags:
    - install
    - post-install

- name: Extract velero client version
  ansible.builtin.set_fact:
    velero_client_version: "{{ (velero_client_version_check.stdout | replace('\t', '  ') | from_yaml).Client.Version }}"
  tags:
    - install
    - post-install

- name: Print out discovered client version
  ansible.builtin.debug:
    msg: "[DEBUG]: Discovered client version: {{ velero_client_version }}"
  tags:
    - install
    - post-install

- name: Verify velero client reports correct version
  fail:
    msg: "Can't identify velero client version to confirm it's working"
  when:
    velero_client_version is not regex('^[vV][0-9]+\.[0-9]+\.[0-9]+$')
  tags:
    - install
    - post-install

- name: Verify that velero client and server versions match
  ansible.builtin.debug:
    msg: >
      [WARNING]: Velero client and server versions do not match: client version: {{ velero_client_version }} and server version: {{ velero_server_version }}. This may impact correctness of the backup and restore procedures.
  when:
    - velero_client_version != velero_server_version
  tags:
    - install
    - post-install

- name: Remove tmp directory
  ansible.builtin.file:
    path: "{{ tmp_dir }}"
    state: absent
  tags:
    - install
    - post-install

- name: Get all Restore objects
  kubernetes.core.k8s_info:
    api_version: velero.io/v1
    kind: Restore
    namespace: "{{ velero.namespace }}"
  register: restore_objects
  when:
    - velero.enabled
    - velero.install_server
  tags:
    - delete
    - velero-delete

- name: Delete all Restore objects using velero CLI
  ansible.builtin.command:
    cmd: velero restore delete {{ item.metadata.name }} --confirm --namespace {{ velero.namespace }}
  loop: "{{ restore_objects.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when:
    - velero.enabled
    - velero.install_server
    - restore_objects.resources | length > 0
  ignore_errors: true
  tags:
    - delete
    - velero-delete

- name: Get all Backup objects
  kubernetes.core.k8s_info:
    api_version: velero.io/v1
    kind: Backup
    namespace: "{{ velero.namespace }}"
  register: backup_objects
  when:
    - velero.enabled
    - velero.install_server
  tags:
    - delete
    - velero-delete

- name: Delete all Backup objects using velero CLI
  ansible.builtin.command:
    cmd: velero backup delete {{ item.metadata.name }} --confirm --namespace {{ velero.namespace }}
  loop: "{{ backup_objects.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when:
    - velero.enabled
    - velero.install_server
    - backup_objects.resources | length > 0
  ignore_errors: true
  tags:
    - delete
    - velero-delete

- name: Uninstall Velero Helm chart
  kubernetes.core.helm:
    name: "{{ velero.helm.release_name }}"
    namespace: "{{ velero.namespace }}"
    state: absent
  when:
    - velero.enabled
    - velero.install_server
  tags:
    - delete
    - velero-delete

- name: Wait for velero pods to be deleted
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ velero.namespace }}"
    label_selectors:
      - app.kubernetes.io/name=velero
  register: velero_pods_info
  until: velero_pods_info.resources | length == 0
  retries: 30
  delay: 10
  when:
    - velero.enabled
    - velero.install_server
  tags:
    - delete
    - velero-delete

- name: Delete velero namespace
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ velero.namespace }}"
  when:
    - velero.enabled
    - velero.install_server
  tags:
    - delete
    - velero-delete
