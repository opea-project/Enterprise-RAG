#########################################################
# Tempo - traces backend
#########################################################
tempo:
  # -------------
  enabled: true
  # -------------

  # Enable scrapping metrics from prometheus
  serviceMonitor:
    additionalLabels:
      release: "telemetry"
    enabled: true

  # Enable persistance
  persistence:
    enabled: true
    size: 50Gi

  # Tempo configuration
  tempo:
    reportingEnabled: false # disable anonymous reporting to Grafana Labs
    receivers:
      jaeger: {} # ignore error because of helm null error for subcharts
    # retention of traces (1 week)
    retention: 168h

    # -- Service graph
    metricsGenerator:
      enabled: true
      remoteWriteUrl: "http://telemetry-kube-prometheus-prometheus.monitoring:9090/api/v1/write"

  # -- Dynamically Tempo configuration file (uses values from above)
  # ### with extra comment 'EXTRA' to enable extra features available in distributed mode
  config: |
      memberlist:
        cluster_label: "{{ .Release.Name }}.{{ .Release.Namespace }}"
      multitenancy_enabled: {{ .Values.tempo.multitenancyEnabled }}
      usage_report:
        reporting_enabled: {{ .Values.tempo.reportingEnabled }}
      compactor:
        compaction:
          block_retention: {{ .Values.tempo.retention }}
      distributor:
        receivers:
          {{- toYaml .Values.tempo.receivers | nindent 8 }}
      ingester:
        {{- toYaml .Values.tempo.ingester | nindent 6 }}
      server:
        {{- toYaml .Values.tempo.server | nindent 6 }}
      storage:
        {{- toYaml .Values.tempo.storage | nindent 6 }}
      querier:
        {{- toYaml .Values.tempo.querier | nindent 6 }}
      query_frontend:
        {{- toYaml .Values.tempo.queryFrontend | nindent 6 }}
      overrides:
        {{- toYaml .Values.tempo.global_overrides | nindent 6 }}
        {{- if .Values.tempo.metricsGenerator.enabled }}
            metrics_generator_processors:
            - 'service-graphs'
            - 'span-metrics'
      metrics_generator:
            storage:
              path: "/tmp/tempo"
              remote_write:
                - url: {{ .Values.tempo.metricsGenerator.remoteWriteUrl }}
                  send_exemplars: true  # EXTRA
            # EXTRA
            processor:
              service_graphs:
                #dimensions: []
                dimensions: ['namespace'] # TODO/warning: breaks link from traces->logs
                histogram_buckets: [0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 1.024, 2.048, 3.0, 4.096, 5.0, 6.0, 7.0, 8.192, 10.0, 12.0, 16.384, 20.0, 30.0, 45.0, 60.0, 90.0, 120.0]
                max_items: 10000
                wait: 10s
                workers: 10
              span_metrics:
                #dimensions: []
                dimensions: ['namespace'] # TODO/warning: breaks link from traces->logs
                histogram_buckets: [0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 1.024, 2.048, 3.0, 4.096, 5.0, 6.0, 7.0, 8.192, 10.0, 12.0, 16.384, 20.0, 30.0, 45.0, 60.0, 90.0, 120.0]
        {{- end }}

#########################################################
# OpenTelemetry operator
#########################################################
otel-operator:
  # -------------
  enabled: true
  # -------------
  # https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-operator#tls-certificate-requirement
  # From otel operator docs:
  # Do not rely on cert-manager:
  # "The easiest and default method is to install the cert-manager and set admissionWebhooks.certManager.enabled to true. In this way, cert-manager will generate a self-signed certificate. See cert-manager installation for more details."
  admissionWebhooks:
    certManager:
      enabled: false  # default is true
    # You can use an automatically generated self-signed certificate by setting admissionWebhooks.certManager.enabled to false and admissionWebhooks.autoGenerateCert.enabled to true. Helm will create a self-signed cert and a secret for you.
    # opentelemetry-helm-charts/charts/opentelemetry-operator/values.yaml:263
    autoGenerateCert:
      enabled: true   # default is true, but added as explicit requirments
      recreate: false # reuse existing, do not recreate certs/CA for webhooks

  # otel-operator-values.yaml
  manager:
    collectorImage:
      # repository: otel/opentelemetry-collector-k8s
      # we need contrib for kubernetes processor/prometheus exporter
      # https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions
      repository: "otel/opentelemetry-collector-contrib"
      tag: "0.110.0"
      # over writen by spec.image from CR
      # image: "otel/opentelemetry-collector-contrib:0.109.0"
    extraArgs:
    - '--enable-multi-instrumentation'

  # /root/ppalucki/rag/opentelemetry-helm-charts/charts/opentelemetry-operator/values.yaml
  # manager:
    ### NEED FOR GO
    # extraArgs:
    #  https://github.com/open-telemetry/opentelemetry-operator?tab=readme-ov-file#controlling-instrumentation-capabilities
    # - '--enable-go-instrumentation'
    # - '--enable-nginx-instrumentation'
      # The Go instrumentation support in the operator is disabled by default.
      # To enable it, use the operator.autoinstrumentation.go feature gate.
      # go:
      #   repository: ""
      #   tag: ""
    # Feature Gates are a comma-delimited list of feature gate identifiers.
    # Prefix a gate with '-' to disable support.
    # Prefixing a gate with '+' or no prefix will enable support.
    # A full list of valid identifiers can be found here: https://github.com/open-telemetry/opentelemetry-operator/blob/main/pkg/featuregate/featuregate.go
    #featureGates: "+operator.autoinstrumentation.go"
    #featureGates: "+operator.golang.flags,"
