// Copyright (C) 2024-2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

import { isValidElement, ReactNode } from "react";

import { titleCaseString } from "@/utils";

const languageDisplayNames: Record<string, string> = {
  abap: "ABAP",
  abnf: "ABNF",
  actionscript: "ActionScript",
  ada: "Ada",
  agda: "Agda",
  al: "AL",
  antlr4: "ANTLR4",
  apacheconf: "ApacheConf",
  apex: "Apex",
  apl: "APL",
  applescript: "AppleScript",
  aql: "AQL",
  arduino: "Arduino",
  arff: "ARFF",
  asciidoc: "AsciiDoc",
  asm6502: "6502 Assembly",
  asmatmel: "Atmel Assembly",
  aspnet: "ASP.NET",
  autohotkey: "AutoHotkey",
  autoit: "AutoIt",
  avisynth: "AviSynth",
  "avro-idl": "Avro IDL",
  bash: "Bash",
  basic: "BASIC",
  batch: "Batch",
  bbcode: "BBCode",
  bicep: "Bicep",
  birb: "Birb",
  bison: "Bison",
  bnf: "BNF",
  brightscript: "BrightScript",
  bro: "Bro",
  bsl: "BSL",
  c: "C",
  cfscript: "CFScript",
  chaiscript: "ChaiScript",
  cil: "CIL",
  clike: "C-like",
  clojure: "Clojure",
  cmake: "CMake",
  cobol: "COBOL",
  coffeescript: "CoffeeScript",
  concurnas: "Concurnas",
  coq: "Coq",
  cpp: "C++",
  crystal: "Crystal",
  csharp: "C#",
  cshtml: "CSHTML",
  csp: "CSP",
  "css-extras": "CSS Extras",
  css: "CSS",
  csv: "CSV",
  cypher: "Cypher",
  d: "D",
  dart: "Dart",
  dataweave: "DataWeave",
  dax: "DAX",
  dhall: "Dhall",
  diff: "Diff",
  django: "Django",
  "dns-zone-file": "DNS Zone File",
  docker: "Docker",
  dot: "DOT",
  ebnf: "EBNF",
  editorconfig: "EditorConfig",
  eiffel: "Eiffel",
  ejs: "EJS",
  elixir: "Elixir",
  elm: "Elm",
  erb: "ERB",
  erlang: "Erlang",
  etlua: "ETLua",
  "excel-formula": "Excel Formula",
  factor: "Factor",
  false: "False",
  "firestore-security-rules": "Firestore Security Rules",
  flow: "Flow",
  fortran: "Fortran",
  fsharp: "F#",
  ftl: "FTL",
  gap: "GAP",
  gcode: "G-code",
  gdscript: "GDScript",
  gedcom: "GEDCOM",
  gherkin: "Gherkin",
  git: "Git",
  glsl: "GLSL",
  gml: "GML",
  gn: "GN",
  "go-module": "Go Module",
  go: "Go",
  graphql: "GraphQL",
  groovy: "Groovy",
  haml: "Haml",
  handlebars: "Handlebars",
  haskell: "Haskell",
  haxe: "Haxe",
  hcl: "HCL",
  hlsl: "HLSL",
  hoon: "Hoon",
  hpkp: "HPKP",
  hsts: "HSTS",
  http: "HTTP",
  ichigojam: "IchigoJam",
  icon: "Icon",
  "icu-message-format": "ICU Message Format",
  idris: "Idris",
  iecst: "IECST",
  ignore: "Ignore",
  inform7: "Inform 7",
  ini: "INI",
  io: "Io",
  j: "J",
  java: "Java",
  javadoc: "Javadoc",
  javadoclike: "Javadoclike",
  javascript: "JavaScript",
  javastacktrace: "Java Stacktrace",
  jexl: "JEXL",
  jolie: "Jolie",
  jq: "jq",
  "js-extras": "JS Extras",
  "js-templates": "JS Templates",
  jsdoc: "JSDoc",
  json: "JSON",
  json5: "JSON5",
  jsonp: "JSONP",
  jsstacktrace: "JS Stacktrace",
  jsx: "JSX",
  julia: "Julia",
  keepalived: "Keepalived",
  keyman: "Keyman",
  kotlin: "Kotlin",
  kumir: "Kumir",
  kusto: "Kusto",
  latex: "LaTeX",
  latte: "Latte",
  less: "Less",
  lilypond: "LilyPond",
  liquid: "Liquid",
  lisp: "Lisp",
  livescript: "LiveScript",
  llvm: "LLVM",
  log: "Log",
  lolcode: "LOLCODE",
  lua: "Lua",
  magma: "Magma",
  makefile: "Makefile",
  markdown: "Markdown",
  "markup-templating": "Markup Templating",
  markup: "Markup",
  matlab: "MATLAB",
  maxscript: "Maxscript",
  mel: "MEL",
  mermaid: "Mermaid",
  mizar: "Mizar",
  mongodb: "MongoDB",
  monkey: "Monkey",
  moonscript: "MoonScript",
  n1ql: "N1QL",
  n4js: "N4JS",
  "nand2tetris-hdl": "Nand2Tetris HDL",
  naniscript: "NaniScript",
  nasm: "NASM",
  neon: "NEON",
  nevod: "Nevod",
  nginx: "Nginx",
  nim: "Nim",
  nix: "Nix",
  nsis: "NSIS",
  objectivec: "Objective-C",
  ocaml: "OCaml",
  opencl: "OpenCL",
  openqasm: "OpenQASM",
  oz: "Oz",
  parigp: "PARI/GP",
  parser: "Parser",
  pascal: "Pascal",
  pascaligo: "Pascaligo",
  pcaxis: "PC-Axis",
  peoplecode: "PeopleCode",
  perl: "Perl",
  "php-extras": "PHP Extras",
  php: "PHP",
  phpdoc: "PHPDoc",
  plsql: "PL/SQL",
  powerquery: "Power Query",
  powershell: "PowerShell",
  processing: "Processing",
  prolog: "Prolog",
  promql: "PromQL",
  properties: "Properties",
  protobuf: "Protocol Buffers",
  psl: "PSL",
  pug: "Pug",
  puppet: "Puppet",
  pure: "Pure",
  purebasic: "PureBasic",
  purescript: "PureScript",
  python: "Python",
  q: "Q",
  qml: "QML",
  qore: "Qore",
  qsharp: "Q#",
  r: "R",
  racket: "Racket",
  reason: "Reason",
  regex: "Regex",
  rego: "Rego",
  renpy: "Ren'Py",
  rest: "reST",
  rip: "Rip",
  roboconf: "Roboconf",
  robotframework: "Robot Framework",
  ruby: "Ruby",
  rust: "Rust",
  sas: "SAS",
  sass: "Sass",
  scala: "Scala",
  scheme: "Scheme",
  scss: "SCSS",
  "shell-session": "Shell Session",
  smali: "Smali",
  smalltalk: "Smalltalk",
  smarty: "Smarty",
  sml: "SML",
  solidity: "Solidity",
  "solution-file": "Solution File",
  soy: "Soy",
  sparql: "SPARQL",
  "splunk-spl": "Splunk SPL",
  sqf: "SQF",
  sql: "SQL",
  squirrel: "Squirrel",
  stan: "Stan",
  stylus: "Stylus",
  swift: "Swift",
  systemd: "systemd",
  "t4-cs": "T4 (C#)",
  "t4-templating": "T4 Templating",
  "t4-vb": "T4 (VB)",
  tap: "TAP",
  tcl: "Tcl",
  textile: "Textile",
  toml: "TOML",
  tremor: "Tremor",
  tsx: "TSX",
  tt2: "TT2",
  turtle: "Turtle",
  twig: "Twig",
  typescript: "TypeScript",
  typoscript: "TypoScript",
  unrealscript: "UnrealScript",
  uorazor: "UORazor",
  uri: "URI",
  v: "V",
  vala: "Vala",
  vbnet: "VB.NET",
  velocity: "Velocity",
  verilog: "Verilog",
  vhdl: "VHDL",
  vim: "Vim",
  "visual-basic": "Visual Basic",
  warpscript: "WarpScript",
  wasm: "WebAssembly",
  "web-idl": "Web IDL",
  wiki: "Wiki",
  wolfram: "Wolfram",
  wren: "Wren",
  xeora: "Xeora",
  "xml-doc": "XML Doc",
  xojo: "Xojo",
  xquery: "XQuery",
  yaml: "YAML",
  yang: "YANG",
  zig: "Zig",
} as const;

const extractLanguageFromClassName = (className: string) => {
  if (!className) {
    return "";
  }

  const languageClass = className
    .split(" ")
    .find((cls: string) => cls.startsWith("language-"));
  if (!languageClass) {
    return "";
  }

  const match = /language-([\w-]+)/.exec(languageClass);
  return match ? match[1] : "";
};

const extractRawCode = (node: unknown): string => {
  if (typeof node === "string") {
    return node;
  }

  if (Array.isArray(node)) {
    return node.map(extractRawCode).join("");
  }

  return "";
};

const getLanguageDisplayName = (language: string) => {
  if (!language) {
    return "";
  } else if (languageDisplayNames[language]) {
    return languageDisplayNames[language];
  } else {
    return language.split("-").map(titleCaseString).join(" ");
  }
};

const getPreDetails = (children: ReactNode) => {
  let languageDisplayName = "";
  let rawCode = "";

  if (isValidElement(children)) {
    const className = children.props.className || "";
    const language = extractLanguageFromClassName(className);
    languageDisplayName = getLanguageDisplayName(language);
    rawCode = extractRawCode(children.props.children);
  }

  return {
    languageDisplayName,
    rawCode,
  };
};

export { getPreDetails };
